[=] - assigned task
[*] - current task
[+] - finished task
[/] - postponed task
Current tasks:
I Story telling
    0.[+] Finish off uniques generation - just a stub for now
    0.1[+] Rewrite bacground to string.Template
    1.[+] Global set of names, so that names never repeat inside one random block of text.
    1.1.[+] Predefined names generator (to extend random name generator)
    1.1.1[/] fill predefined name set
    2.[+] Name generation for mNPC and traders
    2.1 Random description generation
    3.[+] Ability to subsitute mNPCs names to background text, defering them as bad and good ones
    (i.e. if background says that you were robbed by sum1 - that can be a bad NPC you'll meet later)
    4.[+] Artifact and unique items (basic skeleton)
    5. Add Artifact or unique items reference to background text
    6?. Unique NPCs parser engine
    6[+]. Random shuffle NPCs, define basic quests
    7. Make text from what we have so far
    8. Layout first quest start - background, NPC placement, apropriate map
    9. Allow editing of generational params at the start of the game
actualy story telling based on random text generation is going to be stupidly
boring. What actualy we need is to define some relationships and etc. so that
we get something like that
    9. Now that we have generated realtions -use them in quests
    10. we need starting scenarios. They should be vastly random:
        -a quest starts at your own house
        -b quest starts at king's palace
        -c quest starts at the middle of the street
        -d quest starts in the forest (desert, cave)
        -e quest start at some other place
    11. If npc is the target of quest and has bad realtionship with some deity
    this deity can optionaly help you during the quest
    12. Chapters

One day you wake up in your room (custom action) and see your friend (relationship) 
(actualy he's an npc with assigned role) and Dave (your friend's friend) in your
room. When you ask friend about his visit, he says Dave has something he want
to ask you about


II. Dungeon generators.
    We need more of them.
    0. Document static maps format
    1. Finish cave generator (connect the blobs together).
    actualy we may need some other general function like = check_missing_feature
    which will check the room (bubble) if it has some feature like: door or up/down stairs or portal.
        variant = util.roll(1, 5)
    if it does - that buble is okay. So first - randomly place that features and then
    try to connect bubles. Disallow player placement in a bubble with downstairs only.
    2[+]. Add entrance description and house orientation to static generator
    3[+]. Move features to extern file, parse it. As i use functions all over
    the project to create tiles - create functions (parse file, then add them to globals)
    4[-]. Add a check for mandatory tiles - FT_ROCK_WALL, FT_FLOOR, FT_GRASS, FT_ROAD
    5. Add tree border (optional) to CityGenerator
    6. Add some trees (optional) to city generator see II.11
    7. Moar features to place
    8[+]. Split maps into layers, to generate buildings 2 and more floors high
    9.0 [+] Store the rects of parsed maps (we will need them later). Also find rooms in shuch
    maps and store them as well. Transform rects as we rotate or flip the map.
    9[+]. Adjust rendering of other tiles to reflect you going up or down the floors
    basically, we can make only trees and other houses to render for the second floor
    and only wells and such to render for -1 floor
    10. Actions and special places for maps (places where the quest starts or ends). Possibly
    we need this right before I.8
    11. Next we need dense forest generator
    12.[*] option for map description, to limit number of generations of certain room
    (i.e. some rooms can be generated once per game, or once per level)
    13.[+] Place-type specification for des-maps - like forest, desert (ie some
     predefined rooms can be placed only in certain locations)
     14. Move old generators to new dg module
     15. Implement all listed generators
     16. Definition of branches
     17[*]. Make test crypt map work as it is intented to work, including wandering mobs and working traps

III. Gameplay features
    1. Ability to go up/down stairs
    2. Chained map-generation. If we go downstairs we need to generate next level

IV. World
    1. World itself. We should generate world map and regions with some static elements
    2. Select random position to start
    3. Handle region requests during world-gen
    4. Place cruicial items/npcs across world
    5. Define branches

V. UI
    1. Chapter anounce
    2. Dialogs
    3. Movies for quests

Future goals
    1. maze generator
    2. Passage Generator, like
#############
            #
##########  #
#           #
# ###########
#

with some randomizations.
    3. More customization of city generator. Add some branch roads, add lakes for countrysides etc
    4. Item and monster descriptions should be stored in external text files and loaded when needed

    5. Floodfill. Actualy we need a special case of flood fill. By default if will generate 3x3 cloud. But if 3x3 can't be generated then flood fill
    should be applied. example (#=wall, $=flood-filled square, %-start of flood-fill, .=unfilled square)
 ###########
 #%$$$$$$..
 ###$$######
    ##
5. Rivers (see http://www.umbrarumregnum.net/articles/creating-rivers). Definetly should be in for large maps

IDEAS
 1. spell - elemental plane portal. opens portal to one of selected planes
damaging or luring creatures passing nearby
2. Abyss should consist of concentric rooms with a hole of various radius at center. when you reach center, you go down one level. no come back
